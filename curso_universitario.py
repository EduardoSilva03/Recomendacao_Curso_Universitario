import sys

class Ontologia:
    def __init__(self):
        self.areas = {
            "Exatas": {"habilidades": ["racioc√≠nio l√≥gico", "c√°lculo", "an√°lise"], "pontos_minimos": 30},
            "Humanas": {"habilidades": ["comunica√ß√£o", "escrita", "argumenta√ß√£o"], "pontos_minimos": 30},
            "Biol√≥gicas": {"habilidades": ["observa√ß√£o", "m√©todo cient√≠fico", "dedica√ß√£o"], "pontos_minimos": 30},
            "Sociais": {"habilidades": ["negocia√ß√£o", "estrat√©gia", "an√°lise de dados"], "pontos_minimos": 30},
        }

def aplicar_questionario():
    perguntas = [
        ("Voc√™ gosta de resolver problemas matem√°ticos?", "Exatas"),
        ("Prefere ler e interpretar textos?", "Humanas"),
        ("Se interessa por biologia e ci√™ncias naturais?", "Biol√≥gicas"),
        ("Gosta de entender como funcionam os neg√≥cios e o mercado?", "Sociais"),
        ("Prefere trabalhar com n√∫meros e c√°lculos complexos?", "Exatas"),
        ("Se sente confort√°vel debatendo ideias e conceitos?", "Humanas"),
        ("Tem interesse em trabalhar com pesquisas laboratoriais?", "Biol√≥gicas"),
        ("Acha interessante o funcionamento da economia?", "Sociais"),
        ("Gosta de programar e criar solu√ß√µes tecnol√≥gicas?", "Exatas"),
        ("Prefere escrever textos argumentativos e ensaios?", "Humanas"),
        ("Gosta de estudar o corpo humano e suas fun√ß√µes?", "Biol√≥gicas"),
        ("Tem interesse em trabalhar com marketing e publicidade?", "Sociais"),
        ("Acha interessante a f√≠sica e suas aplica√ß√µes?", "Exatas"),
        ("Gosta de ensinar e transmitir conhecimento?", "Humanas"),
        ("Prefere estudar qu√≠mica e suas intera√ß√µes?", "Biol√≥gicas"),
    ]
    
    pontuacao = {"Exatas": 0, "Humanas": 0, "Biol√≥gicas": 0, "Sociais": 0}
    
    print("Responda as perguntas de 0 a 10 (sendo 0 = discordo totalmente e 10 = concordo totalmente):\n")
    for pergunta, area in perguntas:
        while True:
            try:
                resposta = int(input(f"{pergunta} (0-10): "))
                if 0 <= resposta <= 10:
                    pontuacao[area] += resposta
                    break
                else:
                    print("Digite um valor entre 0 e 10.")
            except ValueError:
                print("Entrada inv√°lida! Digite um n√∫mero entre 0 e 10.")
    
    return pontuacao

class SistemaEspecialista:
    def __init__(self):
        self.ontologia = Ontologia()
    
    def determinar_area(self, pontuacoes):
        melhor_area = max(pontuacoes, key=pontuacoes.get)
        return melhor_area
    
    def exibir_resultado(self, pontuacoes):
        melhor_area = self.determinar_area(pontuacoes)
        print("\nüéØ Resultado Final:")
        print(f"A √°rea mais indicada para voc√™ √©: {melhor_area}")
        
        print("\nüìä Pontua√ß√£o por √°rea:")
        for area, pontos in pontuacoes.items():
            pontos_minimos = self.ontologia.areas[area]['pontos_minimos']
            diferenca = max(0, pontos_minimos - pontos)
            print(f"{area}: {pontos} pontos (M√≠nimo necess√°rio: {pontos_minimos}, Faltam {diferenca} pontos)")
        
        print("\nüéì Cursos recomendados para essa √°rea:")
        self.recomendar_cursos(melhor_area)
    
    def recomendar_cursos(self, area):
        cursos = {
            "Exatas": ["Engenharia da Computa√ß√£o", "Ci√™ncia da Computa√ß√£o", "Matem√°tica", "Engenharia Civil", "Sistemas de Informa√ß√£o"],
            "Humanas": ["Psicologia", "Filosofia", "Direito", "Jornalismo", "Hist√≥ria"],
            "Biol√≥gicas": ["Medicina", "Biomedicina", "Enfermagem", "Nutri√ß√£o", "Biologia"],
            "Sociais": ["Administra√ß√£o", "Marketing", "Economia", "Rela√ß√µes Internacionais", "Gest√£o de RH"]
        }
        
        recomendados = cursos.get(area, [])
        for i, curso in enumerate(recomendados[:5], 1):
            print(f"{i}. {curso}")

def main():
    print("üéì Bem-vindo ao Sistema Especialista de Escolha de Cursos! üéì\n")
    pontuacoes = aplicar_questionario()
    sistema = SistemaEspecialista()
    sistema.exibir_resultado(pontuacoes)

if __name__ == "__main__":
    main()