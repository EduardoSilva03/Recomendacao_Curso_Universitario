import sys  # Importa√ß√£o do m√≥dulo sys (n√£o est√° sendo utilizado no c√≥digo)

# Classe que define a base de conhecimento do sistema especialista
class Ontologia:
    def __init__(self):
        # Dicion√°rio contendo as √°reas do conhecimento, suas habilidades associadas e a pontua√ß√£o m√≠nima necess√°ria
        self.areas = {
            "Exatas": {"habilidades": ["racioc√≠nio l√≥gico", "c√°lculo", "an√°lise"], "pontos_minimos": 30},
            "Humanas": {"habilidades": ["comunica√ß√£o", "escrita", "argumenta√ß√£o"], "pontos_minimos": 30},
            "Biol√≥gicas": {"habilidades": ["observa√ß√£o", "m√©todo cient√≠fico", "dedica√ß√£o"], "pontos_minimos": 30},
            "Sociais": {"habilidades": ["negocia√ß√£o", "estrat√©gia", "an√°lise de dados"], "pontos_minimos": 30},
        }

# Fun√ß√£o que aplica o question√°rio ao usu√°rio
def aplicar_questionario():
    # Lista de perguntas associadas a cada √°rea do conhecimento
    perguntas = [
        ("Voc√™ gosta de resolver problemas matem√°ticos?", "Exatas"),
        ("Prefere ler e interpretar textos?", "Humanas"),
        ("Se interessa por biologia e ci√™ncias naturais?", "Biol√≥gicas"),
        ("Gosta de entender como funcionam os neg√≥cios e o mercado?", "Sociais"),
        ("Prefere trabalhar com n√∫meros e c√°lculos complexos?", "Exatas"),
        ("Se sente confort√°vel debatendo ideias e conceitos?", "Humanas"),
        ("Tem interesse em trabalhar com pesquisas laboratoriais?", "Biol√≥gicas"),
        ("Acha interessante o funcionamento da economia?", "Sociais"),
        ("Gosta de programar e criar solu√ß√µes tecnol√≥gicas?", "Exatas"),
        ("Prefere escrever textos argumentativos e ensaios?", "Humanas"),
        ("Gosta de estudar o corpo humano e suas fun√ß√µes?", "Biol√≥gicas"),
        ("Tem interesse em trabalhar com marketing e publicidade?", "Sociais"),
        ("Acha interessante a f√≠sica e suas aplica√ß√µes?", "Exatas"),
        ("Gosta de ensinar e transmitir conhecimento?", "Humanas"),
        ("Prefere estudar qu√≠mica e suas intera√ß√µes?", "Biol√≥gicas"),
    ]
    
    # Dicion√°rio que armazena a pontua√ß√£o do usu√°rio para cada √°rea do conhecimento
    pontuacao = {"Exatas": 0, "Humanas": 0, "Biol√≥gicas": 0, "Sociais": 0}
    
    print("Responda as perguntas de 0 a 10 (sendo 0 = discordo totalmente e 10 = concordo totalmente):\n")
    
    # Loop que percorre todas as perguntas e coleta as respostas do usu√°rio
    for pergunta, area in perguntas:
        while True:
            try:
                # Solicita ao usu√°rio uma nota de 0 a 10 para cada pergunta
                resposta = int(input(f"{pergunta} (0-10): "))
                
                # Verifica se a resposta est√° dentro do intervalo permitido
                if 0 <= resposta <= 10:
                    pontuacao[area] += resposta  # Soma a pontua√ß√£o √† √°rea correspondente
                    break  # Sai do loop de valida√ß√£o
                else:
                    print("Digite um valor entre 0 e 10.")  # Mensagem de erro caso o valor esteja fora do intervalo
            except ValueError:
                print("Entrada inv√°lida! Digite um n√∫mero entre 0 e 10.")  # Mensagem de erro caso a entrada n√£o seja um n√∫mero
    
    return pontuacao  # Retorna o dicion√°rio de pontua√ß√µes

# Classe principal do sistema especialista
class SistemaEspecialista:
    def __init__(self):
        self.ontologia = Ontologia()  # Cria√ß√£o da base de conhecimento
    
    # Determina qual √°rea obteve a maior pontua√ß√£o
    def determinar_area(self, pontuacoes):
        melhor_area = max(pontuacoes, key=pontuacoes.get)  # Retorna a √°rea com a pontua√ß√£o mais alta
        return melhor_area
    
    # Exibe os resultados da an√°lise para o usu√°rio
    def exibir_resultado(self, pontuacoes):
        melhor_area = self.determinar_area(pontuacoes)  # Obt√©m a √°rea mais indicada
        
        print("\nüéØ Resultado Final:")
        print(f"A √°rea mais indicada para voc√™ √©: {melhor_area}")
        
        print("\nüìä Pontua√ß√£o por √°rea:")
        # Exibe a pontua√ß√£o do usu√°rio para cada √°rea, indicando se atingiu o m√≠nimo necess√°rio
        for area, pontos in pontuacoes.items():
            pontos_minimos = self.ontologia.areas[area]['pontos_minimos']
            diferenca = max(0, pontos_minimos - pontos)  # Calcula quantos pontos faltam para o m√≠nimo necess√°rio
            print(f"{area}: {pontos} pontos (M√≠nimo necess√°rio: {pontos_minimos}, Faltam {diferenca} pontos)")
        
        print("\nüéì Cursos recomendados para essa √°rea:")
        self.recomendar_cursos(melhor_area)  # Chama a fun√ß√£o de recomenda√ß√£o de cursos
    
    # Recomenda cursos de acordo com a √°rea determinada
    def recomendar_cursos(self, area):
        cursos = {
            "Exatas": [
                "Engenharia da Computa√ß√£o", "Ci√™ncia da Computa√ß√£o", "Matem√°tica", "Engenharia Civil",
                "Sistemas de Informa√ß√£o", "Engenharia El√©trica", "F√≠sica", "Estat√≠stica", "Engenharia Mec√¢nica",
                "Engenharia de Software", "An√°lise e Desenvolvimento de Sistemas", "Ci√™ncia de Dados"
            ],
            "Humanas": [
                "Psicologia", "Filosofia", "Direito", "Jornalismo", "Hist√≥ria",
                "Letras", "Servi√ßo Social", "Pedagogia", "Sociologia", "Teologia",
                "Ci√™ncias Pol√≠ticas", "Antropologia", "Artes C√™nicas", "Comunica√ß√£o Social"
            ],
            "Biol√≥gicas": [
                "Medicina", "Biomedicina", "Enfermagem", "Nutri√ß√£o", "Biologia",
                "Farm√°cia", "Fisioterapia", "Odontologia", "Educa√ß√£o F√≠sica", "Zootecnia",
                "Veterin√°ria", "Biotecnologia", "Ecologia", "Ci√™ncias Ambientais"
            ],
            "Sociais": [
                "Administra√ß√£o", "Marketing", "Economia", "Rela√ß√µes Internacionais", "Gest√£o de RH",
                "Ci√™ncias Cont√°beis", "Publicidade e Propaganda", "Gest√£o P√∫blica", "Log√≠stica", "Com√©rcio Exterior",
                "Empreendedorismo", "Finan√ßas", "Turismo", "Ci√™ncias Atuariais"
            ]
        }
        
        recomendados = cursos.get(area, [])  # Obt√©m a lista de cursos da √°rea determinada
        for i, curso in enumerate(recomendados[:5], 1):  # Exibe at√© 5 cursos recomendados
            print(f"{i}. {curso}")

# Fun√ß√£o principal do programa
def main():
    print("üéì Bem-vindo ao Sistema Especialista de Escolha de Cursos! üéì\n")
    
    pontuacoes = aplicar_questionario()  # Aplica o question√°rio ao usu√°rio
    sistema = SistemaEspecialista()  # Cria uma inst√¢ncia do sistema especialista
    sistema.exibir_resultado(pontuacoes)  # Exibe o resultado baseado nas respostas do usu√°rio

# Verifica se o script est√° sendo executado diretamente
if __name__ == "__main__":
    main()  # Chama a fun√ß√£o principal
